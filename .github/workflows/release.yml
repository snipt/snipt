name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to use (e.g. v1.0.0)'
        required: true
        default: 'test-release'

# Add explicit permissions
permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install X11 dependencies (Ubuntu)
        if: runner.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev libxi-dev libxtst-dev pkg-config libxdo-dev libxkbcommon-dev
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: clippy, rustfmt
      
      - uses: Swatinem/rust-cache@v2
      
      - name: Install git-cliff
        uses: actions/cache@v3
        id: git-cliff-cache
        with:
          path: ~/.cargo/bin/git-cliff
          key: ${{ runner.os }}-git-cliff-0.10.0  # Update version as needed
      
      - name: Install git-cliff if not cached
        if: steps.git-cliff-cache.outputs.cache-hit != 'true'
        run: cargo install git-cliff --force
      
      - name: Generate Changelog
        run: git-cliff --config .github/cliff.toml --output CHANGELOG.md
      
      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse --verify --quiet "refs/tags/${{ github.event.inputs.version || github.ref_name }}"; then
            echo "Tag already exists"
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Tag does not exist"
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Release
        id: create_release
        if: steps.check_tag.outputs.tag_exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          name: "Snipt ${{ github.event.inputs.version || github.ref_name }}"
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          tag_name: ${{ github.event.inputs.version || github.ref_name }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-release:
    name: Build Release
    needs: [create-release]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: snipt
            asset_name: snipt-${{ github.event.inputs.version || github.ref_name }}-linux-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: snipt
            asset_name: snipt-${{ github.event.inputs.version || github.ref_name }}-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: snipt
            asset_name: snipt-${{ github.event.inputs.version || github.ref_name }}-macos-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install X11 dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev libxi-dev libxtst-dev pkg-config libxdo-dev libxkbcommon-dev
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: ${{ matrix.target }}
      
      - name: Build Release Binary
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Compress Release Binary (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p compressed
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} compressed/
          cd compressed
          tar czvf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          echo "ASSET=${{ matrix.asset_name }}.tar.gz" >> $GITHUB_ENV
          echo "ASSET_PATH=compressed/${{ matrix.asset_name }}.tar.gz" >> $GITHUB_ENV
      
      - name: Compress Release Binary (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir -p compressed
          copy target\${{ matrix.target }}\release\${{ matrix.artifact_name }} compressed\
          cd compressed
          7z a ${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
          echo "ASSET=${{ matrix.asset_name }}.zip" >> $env:GITHUB_ENV
          echo "ASSET_PATH=compressed\${{ matrix.asset_name }}.zip" >> $env:GITHUB_ENV
        shell: pwsh
      
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.ASSET_PATH }}
          tag_name: ${{ github.event.inputs.version || github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 